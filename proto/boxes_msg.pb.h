// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boxes_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_boxes_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_boxes_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_boxes_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_boxes_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_boxes_5fmsg_2eproto;
namespace benchmark {
class Boxes_msg;
class Boxes_msgDefaultTypeInternal;
extern Boxes_msgDefaultTypeInternal _Boxes_msg_default_instance_;
class Boxes_msg_Box_msg;
class Boxes_msg_Box_msgDefaultTypeInternal;
extern Boxes_msg_Box_msgDefaultTypeInternal _Boxes_msg_Box_msg_default_instance_;
class pose;
class poseDefaultTypeInternal;
extern poseDefaultTypeInternal _pose_default_instance_;
class twist;
class twistDefaultTypeInternal;
extern twistDefaultTypeInternal _twist_default_instance_;
}  // namespace benchmark
PROTOBUF_NAMESPACE_OPEN
template<> ::benchmark::Boxes_msg* Arena::CreateMaybeMessage<::benchmark::Boxes_msg>(Arena*);
template<> ::benchmark::Boxes_msg_Box_msg* Arena::CreateMaybeMessage<::benchmark::Boxes_msg_Box_msg>(Arena*);
template<> ::benchmark::pose* Arena::CreateMaybeMessage<::benchmark::pose>(Arena*);
template<> ::benchmark::twist* Arena::CreateMaybeMessage<::benchmark::twist>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace benchmark {

// ===================================================================

class pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.pose) */ {
 public:
  inline pose() : pose(nullptr) {};
  virtual ~pose();

  pose(const pose& from);
  pose(pose&& from) noexcept
    : pose() {
    *this = ::std::move(from);
  }

  inline pose& operator=(const pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline pose& operator=(pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pose* internal_default_instance() {
    return reinterpret_cast<const pose*>(
               &_pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pose& a, pose& b) {
    a.Swap(&b);
  }
  inline void Swap(pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pose* New() const final {
    return CreateMaybeMessage<pose>(nullptr);
  }

  pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pose& from);
  void MergeFrom(const pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.pose";
  }
  protected:
  explicit pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_boxes_5fmsg_2eproto);
    return ::descriptor_table_boxes_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .foxglove.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::foxglove::Vector3& position() const;
  ::foxglove::Vector3* release_position();
  ::foxglove::Vector3* mutable_position();
  void set_allocated_position(::foxglove::Vector3* position);
  private:
  const ::foxglove::Vector3& _internal_position() const;
  ::foxglove::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::foxglove::Vector3* position);
  ::foxglove::Vector3* unsafe_arena_release_position();

  // .foxglove.Vector3 orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::foxglove::Vector3& orientation() const;
  ::foxglove::Vector3* release_orientation();
  ::foxglove::Vector3* mutable_orientation();
  void set_allocated_orientation(::foxglove::Vector3* orientation);
  private:
  const ::foxglove::Vector3& _internal_orientation() const;
  ::foxglove::Vector3* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::foxglove::Vector3* orientation);
  ::foxglove::Vector3* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:benchmark.pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::foxglove::Vector3* position_;
  ::foxglove::Vector3* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_boxes_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.twist) */ {
 public:
  inline twist() : twist(nullptr) {};
  virtual ~twist();

  twist(const twist& from);
  twist(twist&& from) noexcept
    : twist() {
    *this = ::std::move(from);
  }

  inline twist& operator=(const twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline twist& operator=(twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const twist* internal_default_instance() {
    return reinterpret_cast<const twist*>(
               &_twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(twist& a, twist& b) {
    a.Swap(&b);
  }
  inline void Swap(twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline twist* New() const final {
    return CreateMaybeMessage<twist>(nullptr);
  }

  twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const twist& from);
  void MergeFrom(const twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.twist";
  }
  protected:
  explicit twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_boxes_5fmsg_2eproto);
    return ::descriptor_table_boxes_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .foxglove.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::foxglove::Vector3& linear() const;
  ::foxglove::Vector3* release_linear();
  ::foxglove::Vector3* mutable_linear();
  void set_allocated_linear(::foxglove::Vector3* linear);
  private:
  const ::foxglove::Vector3& _internal_linear() const;
  ::foxglove::Vector3* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::foxglove::Vector3* linear);
  ::foxglove::Vector3* unsafe_arena_release_linear();

  // .foxglove.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::foxglove::Vector3& angular() const;
  ::foxglove::Vector3* release_angular();
  ::foxglove::Vector3* mutable_angular();
  void set_allocated_angular(::foxglove::Vector3* angular);
  private:
  const ::foxglove::Vector3& _internal_angular() const;
  ::foxglove::Vector3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::foxglove::Vector3* angular);
  ::foxglove::Vector3* unsafe_arena_release_angular();

  // @@protoc_insertion_point(class_scope:benchmark.twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::foxglove::Vector3* linear_;
  ::foxglove::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_boxes_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class Boxes_msg_Box_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.Boxes_msg.Box_msg) */ {
 public:
  inline Boxes_msg_Box_msg() : Boxes_msg_Box_msg(nullptr) {};
  virtual ~Boxes_msg_Box_msg();

  Boxes_msg_Box_msg(const Boxes_msg_Box_msg& from);
  Boxes_msg_Box_msg(Boxes_msg_Box_msg&& from) noexcept
    : Boxes_msg_Box_msg() {
    *this = ::std::move(from);
  }

  inline Boxes_msg_Box_msg& operator=(const Boxes_msg_Box_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boxes_msg_Box_msg& operator=(Boxes_msg_Box_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Boxes_msg_Box_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Boxes_msg_Box_msg* internal_default_instance() {
    return reinterpret_cast<const Boxes_msg_Box_msg*>(
               &_Boxes_msg_Box_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Boxes_msg_Box_msg& a, Boxes_msg_Box_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Boxes_msg_Box_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Boxes_msg_Box_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boxes_msg_Box_msg* New() const final {
    return CreateMaybeMessage<Boxes_msg_Box_msg>(nullptr);
  }

  Boxes_msg_Box_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boxes_msg_Box_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Boxes_msg_Box_msg& from);
  void MergeFrom(const Boxes_msg_Box_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boxes_msg_Box_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.Boxes_msg.Box_msg";
  }
  protected:
  explicit Boxes_msg_Box_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_boxes_5fmsg_2eproto);
    return ::descriptor_table_boxes_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimTimeFieldNumber = 2,
    kComputatiomTimeFieldNumber = 3,
    kModelPoseFieldNumber = 4,
    kModelTwistFieldNumber = 5,
    kModelNoFieldNumber = 1,
  };
  // repeated double sim_time = 2;
  int sim_time_size() const;
  private:
  int _internal_sim_time_size() const;
  public:
  void clear_sim_time();
  private:
  double _internal_sim_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_sim_time() const;
  void _internal_add_sim_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_sim_time();
  public:
  double sim_time(int index) const;
  void set_sim_time(int index, double value);
  void add_sim_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      sim_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_sim_time();

  // repeated double computatiom_time = 3;
  int computatiom_time_size() const;
  private:
  int _internal_computatiom_time_size() const;
  public:
  void clear_computatiom_time();
  private:
  double _internal_computatiom_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_computatiom_time() const;
  void _internal_add_computatiom_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_computatiom_time();
  public:
  double computatiom_time(int index) const;
  void set_computatiom_time(int index, double value);
  void add_computatiom_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      computatiom_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_computatiom_time();

  // repeated .benchmark.pose model_pose = 4;
  int model_pose_size() const;
  private:
  int _internal_model_pose_size() const;
  public:
  void clear_model_pose();
  ::benchmark::pose* mutable_model_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pose >*
      mutable_model_pose();
  private:
  const ::benchmark::pose& _internal_model_pose(int index) const;
  ::benchmark::pose* _internal_add_model_pose();
  public:
  const ::benchmark::pose& model_pose(int index) const;
  ::benchmark::pose* add_model_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pose >&
      model_pose() const;

  // repeated .benchmark.twist model_twist = 5;
  int model_twist_size() const;
  private:
  int _internal_model_twist_size() const;
  public:
  void clear_model_twist();
  ::benchmark::twist* mutable_model_twist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::twist >*
      mutable_model_twist();
  private:
  const ::benchmark::twist& _internal_model_twist(int index) const;
  ::benchmark::twist* _internal_add_model_twist();
  public:
  const ::benchmark::twist& model_twist(int index) const;
  ::benchmark::twist* add_model_twist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::twist >&
      model_twist() const;

  // int32 model_no = 1;
  void clear_model_no();
  ::PROTOBUF_NAMESPACE_ID::int32 model_no() const;
  void set_model_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_no() const;
  void _internal_set_model_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.Boxes_msg.Box_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > sim_time_;
  mutable std::atomic<int> _sim_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > computatiom_time_;
  mutable std::atomic<int> _computatiom_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pose > model_pose_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::twist > model_twist_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_boxes_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class Boxes_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.Boxes_msg) */ {
 public:
  inline Boxes_msg() : Boxes_msg(nullptr) {};
  virtual ~Boxes_msg();

  Boxes_msg(const Boxes_msg& from);
  Boxes_msg(Boxes_msg&& from) noexcept
    : Boxes_msg() {
    *this = ::std::move(from);
  }

  inline Boxes_msg& operator=(const Boxes_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boxes_msg& operator=(Boxes_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Boxes_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Boxes_msg* internal_default_instance() {
    return reinterpret_cast<const Boxes_msg*>(
               &_Boxes_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Boxes_msg& a, Boxes_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Boxes_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Boxes_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boxes_msg* New() const final {
    return CreateMaybeMessage<Boxes_msg>(nullptr);
  }

  Boxes_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boxes_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Boxes_msg& from);
  void MergeFrom(const Boxes_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boxes_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.Boxes_msg";
  }
  protected:
  explicit Boxes_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_boxes_5fmsg_2eproto);
    return ::descriptor_table_boxes_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Boxes_msg_Box_msg Box_msg;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kPhysicsEngineFieldNumber = 1,
    kDtFieldNumber = 2,
    kComplexFieldNumber = 3,
    kModelCountFieldNumber = 4,
  };
  // repeated .benchmark.Boxes_msg.Box_msg data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::benchmark::Boxes_msg_Box_msg* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::Boxes_msg_Box_msg >*
      mutable_data();
  private:
  const ::benchmark::Boxes_msg_Box_msg& _internal_data(int index) const;
  ::benchmark::Boxes_msg_Box_msg* _internal_add_data();
  public:
  const ::benchmark::Boxes_msg_Box_msg& data(int index) const;
  ::benchmark::Boxes_msg_Box_msg* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::Boxes_msg_Box_msg >&
      data() const;

  // string physics_engine = 1;
  void clear_physics_engine();
  const std::string& physics_engine() const;
  void set_physics_engine(const std::string& value);
  void set_physics_engine(std::string&& value);
  void set_physics_engine(const char* value);
  void set_physics_engine(const char* value, size_t size);
  std::string* mutable_physics_engine();
  std::string* release_physics_engine();
  void set_allocated_physics_engine(std::string* physics_engine);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_physics_engine();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_physics_engine(
      std::string* physics_engine);
  private:
  const std::string& _internal_physics_engine() const;
  void _internal_set_physics_engine(const std::string& value);
  std::string* _internal_mutable_physics_engine();
  public:

  // double dt = 2;
  void clear_dt();
  double dt() const;
  void set_dt(double value);
  private:
  double _internal_dt() const;
  void _internal_set_dt(double value);
  public:

  // int32 complex = 3;
  void clear_complex();
  ::PROTOBUF_NAMESPACE_ID::int32 complex() const;
  void set_complex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_complex() const;
  void _internal_set_complex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_count = 4;
  void clear_model_count();
  ::PROTOBUF_NAMESPACE_ID::int32 model_count() const;
  void set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_count() const;
  void _internal_set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.Boxes_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::Boxes_msg_Box_msg > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physics_engine_;
  double dt_;
  ::PROTOBUF_NAMESPACE_ID::int32 complex_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_boxes_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pose

// .foxglove.Vector3 position = 1;
inline bool pose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool pose::has_position() const {
  return _internal_has_position();
}
inline const ::foxglove::Vector3& pose::_internal_position() const {
  const ::foxglove::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::foxglove::Vector3*>(
      &::foxglove::_Vector3_default_instance_);
}
inline const ::foxglove::Vector3& pose::position() const {
  // @@protoc_insertion_point(field_get:benchmark.pose.position)
  return _internal_position();
}
inline void pose::unsafe_arena_set_allocated_position(
    ::foxglove::Vector3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.pose.position)
}
inline ::foxglove::Vector3* pose::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::foxglove::Vector3* pose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:benchmark.pose.position)
  
  ::foxglove::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::foxglove::Vector3* pose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::foxglove::Vector3* pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:benchmark.pose.position)
  return _internal_mutable_position();
}
inline void pose::set_allocated_position(::foxglove::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:benchmark.pose.position)
}

// .foxglove.Vector3 orientation = 2;
inline bool pose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool pose::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::foxglove::Vector3& pose::_internal_orientation() const {
  const ::foxglove::Vector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::foxglove::Vector3*>(
      &::foxglove::_Vector3_default_instance_);
}
inline const ::foxglove::Vector3& pose::orientation() const {
  // @@protoc_insertion_point(field_get:benchmark.pose.orientation)
  return _internal_orientation();
}
inline void pose::unsafe_arena_set_allocated_orientation(
    ::foxglove::Vector3* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.pose.orientation)
}
inline ::foxglove::Vector3* pose::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::foxglove::Vector3* pose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:benchmark.pose.orientation)
  
  ::foxglove::Vector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::foxglove::Vector3* pose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::foxglove::Vector3* pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:benchmark.pose.orientation)
  return _internal_mutable_orientation();
}
inline void pose::set_allocated_orientation(::foxglove::Vector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation)->GetArena();
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:benchmark.pose.orientation)
}

// -------------------------------------------------------------------

// twist

// .foxglove.Vector3 linear = 1;
inline bool twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool twist::has_linear() const {
  return _internal_has_linear();
}
inline const ::foxglove::Vector3& twist::_internal_linear() const {
  const ::foxglove::Vector3* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::foxglove::Vector3*>(
      &::foxglove::_Vector3_default_instance_);
}
inline const ::foxglove::Vector3& twist::linear() const {
  // @@protoc_insertion_point(field_get:benchmark.twist.linear)
  return _internal_linear();
}
inline void twist::unsafe_arena_set_allocated_linear(
    ::foxglove::Vector3* linear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.twist.linear)
}
inline ::foxglove::Vector3* twist::release_linear() {
  auto temp = unsafe_arena_release_linear();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::foxglove::Vector3* twist::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:benchmark.twist.linear)
  
  ::foxglove::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::foxglove::Vector3* twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArena());
    linear_ = p;
  }
  return linear_;
}
inline ::foxglove::Vector3* twist::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:benchmark.twist.linear)
  return _internal_mutable_linear();
}
inline void twist::set_allocated_linear(::foxglove::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear)->GetArena();
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:benchmark.twist.linear)
}

// .foxglove.Vector3 angular = 2;
inline bool twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool twist::has_angular() const {
  return _internal_has_angular();
}
inline const ::foxglove::Vector3& twist::_internal_angular() const {
  const ::foxglove::Vector3* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::foxglove::Vector3*>(
      &::foxglove::_Vector3_default_instance_);
}
inline const ::foxglove::Vector3& twist::angular() const {
  // @@protoc_insertion_point(field_get:benchmark.twist.angular)
  return _internal_angular();
}
inline void twist::unsafe_arena_set_allocated_angular(
    ::foxglove::Vector3* angular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.twist.angular)
}
inline ::foxglove::Vector3* twist::release_angular() {
  auto temp = unsafe_arena_release_angular();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::foxglove::Vector3* twist::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:benchmark.twist.angular)
  
  ::foxglove::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::foxglove::Vector3* twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArena());
    angular_ = p;
  }
  return angular_;
}
inline ::foxglove::Vector3* twist::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:benchmark.twist.angular)
  return _internal_mutable_angular();
}
inline void twist::set_allocated_angular(::foxglove::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular)->GetArena();
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:benchmark.twist.angular)
}

// -------------------------------------------------------------------

// Boxes_msg_Box_msg

// int32 model_no = 1;
inline void Boxes_msg_Box_msg::clear_model_no() {
  model_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Boxes_msg_Box_msg::_internal_model_no() const {
  return model_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Boxes_msg_Box_msg::model_no() const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.Box_msg.model_no)
  return _internal_model_no();
}
inline void Boxes_msg_Box_msg::_internal_set_model_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_no_ = value;
}
inline void Boxes_msg_Box_msg::set_model_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_no(value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.Box_msg.model_no)
}

// repeated double sim_time = 2;
inline int Boxes_msg_Box_msg::_internal_sim_time_size() const {
  return sim_time_.size();
}
inline int Boxes_msg_Box_msg::sim_time_size() const {
  return _internal_sim_time_size();
}
inline void Boxes_msg_Box_msg::clear_sim_time() {
  sim_time_.Clear();
}
inline double Boxes_msg_Box_msg::_internal_sim_time(int index) const {
  return sim_time_.Get(index);
}
inline double Boxes_msg_Box_msg::sim_time(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.Box_msg.sim_time)
  return _internal_sim_time(index);
}
inline void Boxes_msg_Box_msg::set_sim_time(int index, double value) {
  sim_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.Box_msg.sim_time)
}
inline void Boxes_msg_Box_msg::_internal_add_sim_time(double value) {
  sim_time_.Add(value);
}
inline void Boxes_msg_Box_msg::add_sim_time(double value) {
  _internal_add_sim_time(value);
  // @@protoc_insertion_point(field_add:benchmark.Boxes_msg.Box_msg.sim_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Boxes_msg_Box_msg::_internal_sim_time() const {
  return sim_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Boxes_msg_Box_msg::sim_time() const {
  // @@protoc_insertion_point(field_list:benchmark.Boxes_msg.Box_msg.sim_time)
  return _internal_sim_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Boxes_msg_Box_msg::_internal_mutable_sim_time() {
  return &sim_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Boxes_msg_Box_msg::mutable_sim_time() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.Boxes_msg.Box_msg.sim_time)
  return _internal_mutable_sim_time();
}

// repeated double computatiom_time = 3;
inline int Boxes_msg_Box_msg::_internal_computatiom_time_size() const {
  return computatiom_time_.size();
}
inline int Boxes_msg_Box_msg::computatiom_time_size() const {
  return _internal_computatiom_time_size();
}
inline void Boxes_msg_Box_msg::clear_computatiom_time() {
  computatiom_time_.Clear();
}
inline double Boxes_msg_Box_msg::_internal_computatiom_time(int index) const {
  return computatiom_time_.Get(index);
}
inline double Boxes_msg_Box_msg::computatiom_time(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.Box_msg.computatiom_time)
  return _internal_computatiom_time(index);
}
inline void Boxes_msg_Box_msg::set_computatiom_time(int index, double value) {
  computatiom_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.Box_msg.computatiom_time)
}
inline void Boxes_msg_Box_msg::_internal_add_computatiom_time(double value) {
  computatiom_time_.Add(value);
}
inline void Boxes_msg_Box_msg::add_computatiom_time(double value) {
  _internal_add_computatiom_time(value);
  // @@protoc_insertion_point(field_add:benchmark.Boxes_msg.Box_msg.computatiom_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Boxes_msg_Box_msg::_internal_computatiom_time() const {
  return computatiom_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Boxes_msg_Box_msg::computatiom_time() const {
  // @@protoc_insertion_point(field_list:benchmark.Boxes_msg.Box_msg.computatiom_time)
  return _internal_computatiom_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Boxes_msg_Box_msg::_internal_mutable_computatiom_time() {
  return &computatiom_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Boxes_msg_Box_msg::mutable_computatiom_time() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.Boxes_msg.Box_msg.computatiom_time)
  return _internal_mutable_computatiom_time();
}

// repeated .benchmark.pose model_pose = 4;
inline int Boxes_msg_Box_msg::_internal_model_pose_size() const {
  return model_pose_.size();
}
inline int Boxes_msg_Box_msg::model_pose_size() const {
  return _internal_model_pose_size();
}
inline void Boxes_msg_Box_msg::clear_model_pose() {
  model_pose_.Clear();
}
inline ::benchmark::pose* Boxes_msg_Box_msg::mutable_model_pose(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.Boxes_msg.Box_msg.model_pose)
  return model_pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pose >*
Boxes_msg_Box_msg::mutable_model_pose() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.Boxes_msg.Box_msg.model_pose)
  return &model_pose_;
}
inline const ::benchmark::pose& Boxes_msg_Box_msg::_internal_model_pose(int index) const {
  return model_pose_.Get(index);
}
inline const ::benchmark::pose& Boxes_msg_Box_msg::model_pose(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.Box_msg.model_pose)
  return _internal_model_pose(index);
}
inline ::benchmark::pose* Boxes_msg_Box_msg::_internal_add_model_pose() {
  return model_pose_.Add();
}
inline ::benchmark::pose* Boxes_msg_Box_msg::add_model_pose() {
  // @@protoc_insertion_point(field_add:benchmark.Boxes_msg.Box_msg.model_pose)
  return _internal_add_model_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pose >&
Boxes_msg_Box_msg::model_pose() const {
  // @@protoc_insertion_point(field_list:benchmark.Boxes_msg.Box_msg.model_pose)
  return model_pose_;
}

// repeated .benchmark.twist model_twist = 5;
inline int Boxes_msg_Box_msg::_internal_model_twist_size() const {
  return model_twist_.size();
}
inline int Boxes_msg_Box_msg::model_twist_size() const {
  return _internal_model_twist_size();
}
inline void Boxes_msg_Box_msg::clear_model_twist() {
  model_twist_.Clear();
}
inline ::benchmark::twist* Boxes_msg_Box_msg::mutable_model_twist(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.Boxes_msg.Box_msg.model_twist)
  return model_twist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::twist >*
Boxes_msg_Box_msg::mutable_model_twist() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.Boxes_msg.Box_msg.model_twist)
  return &model_twist_;
}
inline const ::benchmark::twist& Boxes_msg_Box_msg::_internal_model_twist(int index) const {
  return model_twist_.Get(index);
}
inline const ::benchmark::twist& Boxes_msg_Box_msg::model_twist(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.Box_msg.model_twist)
  return _internal_model_twist(index);
}
inline ::benchmark::twist* Boxes_msg_Box_msg::_internal_add_model_twist() {
  return model_twist_.Add();
}
inline ::benchmark::twist* Boxes_msg_Box_msg::add_model_twist() {
  // @@protoc_insertion_point(field_add:benchmark.Boxes_msg.Box_msg.model_twist)
  return _internal_add_model_twist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::twist >&
Boxes_msg_Box_msg::model_twist() const {
  // @@protoc_insertion_point(field_list:benchmark.Boxes_msg.Box_msg.model_twist)
  return model_twist_;
}

// -------------------------------------------------------------------

// Boxes_msg

// string physics_engine = 1;
inline void Boxes_msg::clear_physics_engine() {
  physics_engine_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Boxes_msg::physics_engine() const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.physics_engine)
  return _internal_physics_engine();
}
inline void Boxes_msg::set_physics_engine(const std::string& value) {
  _internal_set_physics_engine(value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.physics_engine)
}
inline std::string* Boxes_msg::mutable_physics_engine() {
  // @@protoc_insertion_point(field_mutable:benchmark.Boxes_msg.physics_engine)
  return _internal_mutable_physics_engine();
}
inline const std::string& Boxes_msg::_internal_physics_engine() const {
  return physics_engine_.Get();
}
inline void Boxes_msg::_internal_set_physics_engine(const std::string& value) {
  
  physics_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Boxes_msg::set_physics_engine(std::string&& value) {
  
  physics_engine_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:benchmark.Boxes_msg.physics_engine)
}
inline void Boxes_msg::set_physics_engine(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physics_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:benchmark.Boxes_msg.physics_engine)
}
inline void Boxes_msg::set_physics_engine(const char* value,
    size_t size) {
  
  physics_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:benchmark.Boxes_msg.physics_engine)
}
inline std::string* Boxes_msg::_internal_mutable_physics_engine() {
  
  return physics_engine_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Boxes_msg::release_physics_engine() {
  // @@protoc_insertion_point(field_release:benchmark.Boxes_msg.physics_engine)
  return physics_engine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Boxes_msg::set_allocated_physics_engine(std::string* physics_engine) {
  if (physics_engine != nullptr) {
    
  } else {
    
  }
  physics_engine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physics_engine,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:benchmark.Boxes_msg.physics_engine)
}
inline std::string* Boxes_msg::unsafe_arena_release_physics_engine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:benchmark.Boxes_msg.physics_engine)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return physics_engine_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Boxes_msg::unsafe_arena_set_allocated_physics_engine(
    std::string* physics_engine) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (physics_engine != nullptr) {
    
  } else {
    
  }
  physics_engine_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      physics_engine, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.Boxes_msg.physics_engine)
}

// double dt = 2;
inline void Boxes_msg::clear_dt() {
  dt_ = 0;
}
inline double Boxes_msg::_internal_dt() const {
  return dt_;
}
inline double Boxes_msg::dt() const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.dt)
  return _internal_dt();
}
inline void Boxes_msg::_internal_set_dt(double value) {
  
  dt_ = value;
}
inline void Boxes_msg::set_dt(double value) {
  _internal_set_dt(value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.dt)
}

// int32 complex = 3;
inline void Boxes_msg::clear_complex() {
  complex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Boxes_msg::_internal_complex() const {
  return complex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Boxes_msg::complex() const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.complex)
  return _internal_complex();
}
inline void Boxes_msg::_internal_set_complex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  complex_ = value;
}
inline void Boxes_msg::set_complex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_complex(value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.complex)
}

// int32 model_count = 4;
inline void Boxes_msg::clear_model_count() {
  model_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Boxes_msg::_internal_model_count() const {
  return model_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Boxes_msg::model_count() const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.model_count)
  return _internal_model_count();
}
inline void Boxes_msg::_internal_set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_count_ = value;
}
inline void Boxes_msg::set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_count(value);
  // @@protoc_insertion_point(field_set:benchmark.Boxes_msg.model_count)
}

// repeated .benchmark.Boxes_msg.Box_msg data = 5;
inline int Boxes_msg::_internal_data_size() const {
  return data_.size();
}
inline int Boxes_msg::data_size() const {
  return _internal_data_size();
}
inline void Boxes_msg::clear_data() {
  data_.Clear();
}
inline ::benchmark::Boxes_msg_Box_msg* Boxes_msg::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.Boxes_msg.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::Boxes_msg_Box_msg >*
Boxes_msg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.Boxes_msg.data)
  return &data_;
}
inline const ::benchmark::Boxes_msg_Box_msg& Boxes_msg::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::benchmark::Boxes_msg_Box_msg& Boxes_msg::data(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.Boxes_msg.data)
  return _internal_data(index);
}
inline ::benchmark::Boxes_msg_Box_msg* Boxes_msg::_internal_add_data() {
  return data_.Add();
}
inline ::benchmark::Boxes_msg_Box_msg* Boxes_msg::add_data() {
  // @@protoc_insertion_point(field_add:benchmark.Boxes_msg.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::Boxes_msg_Box_msg >&
Boxes_msg::data() const {
  // @@protoc_insertion_point(field_list:benchmark.Boxes_msg.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace benchmark

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_boxes_5fmsg_2eproto
