// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boxes_msg.proto

#include "boxes_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_boxes_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_boxes_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_pose_boxes_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_boxes_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_twist_boxes_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_foxglove_2fVector3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_foxglove_2fVector3_2eproto;
namespace benchmark {
class poseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pose> _instance;
} _pose_default_instance_;
class twistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<twist> _instance;
} _twist_default_instance_;
class Boxes_msg_Box_msgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Boxes_msg_Box_msg> _instance;
} _Boxes_msg_Box_msg_default_instance_;
class Boxes_msgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Boxes_msg> _instance;
} _Boxes_msg_default_instance_;
}  // namespace benchmark
static void InitDefaultsscc_info_Boxes_msg_boxes_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::benchmark::_Boxes_msg_default_instance_;
    new (ptr) ::benchmark::Boxes_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::benchmark::Boxes_msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Boxes_msg_boxes_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Boxes_msg_boxes_5fmsg_2eproto}, {
      &scc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::benchmark::_Boxes_msg_Box_msg_default_instance_;
    new (ptr) ::benchmark::Boxes_msg_Box_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::benchmark::Boxes_msg_Box_msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto}, {
      &scc_info_pose_boxes_5fmsg_2eproto.base,
      &scc_info_twist_boxes_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_pose_boxes_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::benchmark::_pose_default_instance_;
    new (ptr) ::benchmark::pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::benchmark::pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_pose_boxes_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_pose_boxes_5fmsg_2eproto}, {
      &scc_info_Vector3_foxglove_2fVector3_2eproto.base,}};

static void InitDefaultsscc_info_twist_boxes_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::benchmark::_twist_default_instance_;
    new (ptr) ::benchmark::twist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::benchmark::twist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_twist_boxes_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_twist_boxes_5fmsg_2eproto}, {
      &scc_info_Vector3_foxglove_2fVector3_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_boxes_5fmsg_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_boxes_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_boxes_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_boxes_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::benchmark::pose, position_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::benchmark::twist, linear_),
  PROTOBUF_FIELD_OFFSET(::benchmark::twist, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg_Box_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg_Box_msg, model_no_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg_Box_msg, sim_time_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg_Box_msg, computatiom_time_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg_Box_msg, model_pose_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg_Box_msg, model_twist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg, physics_engine_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg, dt_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg, complex_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg, model_count_),
  PROTOBUF_FIELD_OFFSET(::benchmark::Boxes_msg, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::benchmark::pose)},
  { 7, -1, sizeof(::benchmark::twist)},
  { 14, -1, sizeof(::benchmark::Boxes_msg_Box_msg)},
  { 24, -1, sizeof(::benchmark::Boxes_msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::_pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::_twist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::_Boxes_msg_Box_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::_Boxes_msg_default_instance_),
};

const char descriptor_table_protodef_boxes_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017boxes_msg.proto\022\tbenchmark\032\026foxglove/V"
  "ector3.proto\"S\n\004pose\022#\n\010position\030\001 \001(\0132\021"
  ".foxglove.Vector3\022&\n\013orientation\030\002 \001(\0132\021"
  ".foxglove.Vector3\"N\n\005twist\022!\n\006linear\030\001 \001"
  "(\0132\021.foxglove.Vector3\022\"\n\007angular\030\002 \001(\0132\021"
  ".foxglove.Vector3\"\227\002\n\tBoxes_msg\022\026\n\016physi"
  "cs_engine\030\001 \001(\t\022\n\n\002dt\030\002 \001(\001\022\017\n\007complex\030\003"
  " \001(\005\022\023\n\013model_count\030\004 \001(\005\022*\n\004data\030\005 \003(\0132"
  "\034.benchmark.Boxes_msg.Box_msg\032\223\001\n\007Box_ms"
  "g\022\020\n\010model_no\030\001 \001(\005\022\020\n\010sim_time\030\002 \003(\001\022\030\n"
  "\020computatiom_time\030\003 \003(\001\022#\n\nmodel_pose\030\004 "
  "\003(\0132\017.benchmark.pose\022%\n\013model_twist\030\005 \003("
  "\0132\020.benchmark.twistb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_boxes_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_foxglove_2fVector3_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_boxes_5fmsg_2eproto_sccs[4] = {
  &scc_info_Boxes_msg_boxes_5fmsg_2eproto.base,
  &scc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto.base,
  &scc_info_pose_boxes_5fmsg_2eproto.base,
  &scc_info_twist_boxes_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_boxes_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_boxes_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_boxes_5fmsg_2eproto, "boxes_msg.proto", 507,
  &descriptor_table_boxes_5fmsg_2eproto_once, descriptor_table_boxes_5fmsg_2eproto_sccs, descriptor_table_boxes_5fmsg_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_boxes_5fmsg_2eproto::offsets,
  file_level_metadata_boxes_5fmsg_2eproto, 4, file_level_enum_descriptors_boxes_5fmsg_2eproto, file_level_service_descriptors_boxes_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_boxes_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_boxes_5fmsg_2eproto)), true);
namespace benchmark {

// ===================================================================

void pose::InitAsDefaultInstance() {
  ::benchmark::_pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::foxglove::Vector3*>(
      ::foxglove::Vector3::internal_default_instance());
  ::benchmark::_pose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::foxglove::Vector3*>(
      ::foxglove::Vector3::internal_default_instance());
}
class pose::_Internal {
 public:
  static const ::foxglove::Vector3& position(const pose* msg);
  static const ::foxglove::Vector3& orientation(const pose* msg);
};

const ::foxglove::Vector3&
pose::_Internal::position(const pose* msg) {
  return *msg->position_;
}
const ::foxglove::Vector3&
pose::_Internal::orientation(const pose* msg) {
  return *msg->orientation_;
}
void pose::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void pose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
pose::pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:benchmark.pose)
}
pose::pose(const pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::foxglove::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::foxglove::Vector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:benchmark.pose)
}

void pose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pose_boxes_5fmsg_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

pose::~pose() {
  // @@protoc_insertion_point(destructor:benchmark.pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void pose::ArenaDtor(void* object) {
  pose* _this = reinterpret_cast< pose* >(object);
  (void)_this;
}
void pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pose& pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pose_boxes_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void pose::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .foxglove.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .foxglove.Vector3 orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Vector3 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .foxglove.Vector3 orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.pose)
  return target;
}

size_t pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .foxglove.Vector3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .foxglove.Vector3 orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchmark.pose)
  GOOGLE_DCHECK_NE(&from, this);
  const pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchmark.pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchmark.pose)
    MergeFrom(*source);
  }
}

void pose::MergeFrom(const pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::foxglove::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::foxglove::Vector3::MergeFrom(from._internal_orientation());
  }
}

void pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchmark.pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pose::CopyFrom(const pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pose::IsInitialized() const {
  return true;
}

void pose::InternalSwap(pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pose, orientation_)
      + sizeof(pose::orientation_)
      - PROTOBUF_FIELD_OFFSET(pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void twist::InitAsDefaultInstance() {
  ::benchmark::_twist_default_instance_._instance.get_mutable()->linear_ = const_cast< ::foxglove::Vector3*>(
      ::foxglove::Vector3::internal_default_instance());
  ::benchmark::_twist_default_instance_._instance.get_mutable()->angular_ = const_cast< ::foxglove::Vector3*>(
      ::foxglove::Vector3::internal_default_instance());
}
class twist::_Internal {
 public:
  static const ::foxglove::Vector3& linear(const twist* msg);
  static const ::foxglove::Vector3& angular(const twist* msg);
};

const ::foxglove::Vector3&
twist::_Internal::linear(const twist* msg) {
  return *msg->linear_;
}
const ::foxglove::Vector3&
twist::_Internal::angular(const twist* msg) {
  return *msg->angular_;
}
void twist::clear_linear() {
  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
void twist::clear_angular() {
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
twist::twist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:benchmark.twist)
}
twist::twist(const twist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::foxglove::Vector3(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::foxglove::Vector3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:benchmark.twist)
}

void twist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_twist_boxes_5fmsg_2eproto.base);
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

twist::~twist() {
  // @@protoc_insertion_point(destructor:benchmark.twist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void twist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
}

void twist::ArenaDtor(void* object) {
  twist* _this = reinterpret_cast< twist* >(object);
  (void)_this;
}
void twist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void twist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const twist& twist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_twist_boxes_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void twist::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* twist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .foxglove.Vector3 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .foxglove.Vector3 angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* twist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Vector3 linear = 1;
  if (this->has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .foxglove.Vector3 angular = 2;
  if (this->has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.twist)
  return target;
}

size_t twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.twist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .foxglove.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // .foxglove.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void twist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchmark.twist)
  GOOGLE_DCHECK_NE(&from, this);
  const twist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<twist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchmark.twist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchmark.twist)
    MergeFrom(*source);
  }
}

void twist::MergeFrom(const twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    _internal_mutable_linear()->::foxglove::Vector3::MergeFrom(from._internal_linear());
  }
  if (from.has_angular()) {
    _internal_mutable_angular()->::foxglove::Vector3::MergeFrom(from._internal_angular());
  }
}

void twist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchmark.twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void twist::CopyFrom(const twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool twist::IsInitialized() const {
  return true;
}

void twist::InternalSwap(twist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(twist, angular_)
      + sizeof(twist::angular_)
      - PROTOBUF_FIELD_OFFSET(twist, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata twist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Boxes_msg_Box_msg::InitAsDefaultInstance() {
}
class Boxes_msg_Box_msg::_Internal {
 public:
};

Boxes_msg_Box_msg::Boxes_msg_Box_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sim_time_(arena),
  computatiom_time_(arena),
  model_pose_(arena),
  model_twist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:benchmark.Boxes_msg.Box_msg)
}
Boxes_msg_Box_msg::Boxes_msg_Box_msg(const Boxes_msg_Box_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sim_time_(from.sim_time_),
      computatiom_time_(from.computatiom_time_),
      model_pose_(from.model_pose_),
      model_twist_(from.model_twist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_no_ = from.model_no_;
  // @@protoc_insertion_point(copy_constructor:benchmark.Boxes_msg.Box_msg)
}

void Boxes_msg_Box_msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto.base);
  model_no_ = 0;
}

Boxes_msg_Box_msg::~Boxes_msg_Box_msg() {
  // @@protoc_insertion_point(destructor:benchmark.Boxes_msg.Box_msg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Boxes_msg_Box_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Boxes_msg_Box_msg::ArenaDtor(void* object) {
  Boxes_msg_Box_msg* _this = reinterpret_cast< Boxes_msg_Box_msg* >(object);
  (void)_this;
}
void Boxes_msg_Box_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Boxes_msg_Box_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Boxes_msg_Box_msg& Boxes_msg_Box_msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Boxes_msg_Box_msg_boxes_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void Boxes_msg_Box_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.Boxes_msg.Box_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sim_time_.Clear();
  computatiom_time_.Clear();
  model_pose_.Clear();
  model_twist_.Clear();
  model_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Boxes_msg_Box_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 model_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          model_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double sim_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sim_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_sim_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double computatiom_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_computatiom_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_computatiom_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .benchmark.pose model_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_pose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .benchmark.twist model_twist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_twist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Boxes_msg_Box_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.Boxes_msg.Box_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_no = 1;
  if (this->model_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_model_no(), target);
  }

  // repeated double sim_time = 2;
  if (this->_internal_sim_time_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_sim_time(), target);
  }

  // repeated double computatiom_time = 3;
  if (this->_internal_computatiom_time_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_computatiom_time(), target);
  }

  // repeated .benchmark.pose model_pose = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_pose_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_model_pose(i), target, stream);
  }

  // repeated .benchmark.twist model_twist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_twist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_model_twist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.Boxes_msg.Box_msg)
  return target;
}

size_t Boxes_msg_Box_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.Boxes_msg.Box_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sim_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sim_time_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sim_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double computatiom_time = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_computatiom_time_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _computatiom_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .benchmark.pose model_pose = 4;
  total_size += 1UL * this->_internal_model_pose_size();
  for (const auto& msg : this->model_pose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.twist model_twist = 5;
  total_size += 1UL * this->_internal_model_twist_size();
  for (const auto& msg : this->model_twist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 model_no = 1;
  if (this->model_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Boxes_msg_Box_msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchmark.Boxes_msg.Box_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Boxes_msg_Box_msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Boxes_msg_Box_msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchmark.Boxes_msg.Box_msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchmark.Boxes_msg.Box_msg)
    MergeFrom(*source);
  }
}

void Boxes_msg_Box_msg::MergeFrom(const Boxes_msg_Box_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.Boxes_msg.Box_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sim_time_.MergeFrom(from.sim_time_);
  computatiom_time_.MergeFrom(from.computatiom_time_);
  model_pose_.MergeFrom(from.model_pose_);
  model_twist_.MergeFrom(from.model_twist_);
  if (from.model_no() != 0) {
    _internal_set_model_no(from._internal_model_no());
  }
}

void Boxes_msg_Box_msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchmark.Boxes_msg.Box_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boxes_msg_Box_msg::CopyFrom(const Boxes_msg_Box_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.Boxes_msg.Box_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boxes_msg_Box_msg::IsInitialized() const {
  return true;
}

void Boxes_msg_Box_msg::InternalSwap(Boxes_msg_Box_msg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sim_time_.InternalSwap(&other->sim_time_);
  computatiom_time_.InternalSwap(&other->computatiom_time_);
  model_pose_.InternalSwap(&other->model_pose_);
  model_twist_.InternalSwap(&other->model_twist_);
  swap(model_no_, other->model_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Boxes_msg_Box_msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Boxes_msg::InitAsDefaultInstance() {
}
class Boxes_msg::_Internal {
 public:
};

Boxes_msg::Boxes_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:benchmark.Boxes_msg)
}
Boxes_msg::Boxes_msg(const Boxes_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  physics_engine_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physics_engine().empty()) {
    physics_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_physics_engine(),
      GetArena());
  }
  ::memcpy(&dt_, &from.dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_count_) -
    reinterpret_cast<char*>(&dt_)) + sizeof(model_count_));
  // @@protoc_insertion_point(copy_constructor:benchmark.Boxes_msg)
}

void Boxes_msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Boxes_msg_boxes_5fmsg_2eproto.base);
  physics_engine_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_count_) -
      reinterpret_cast<char*>(&dt_)) + sizeof(model_count_));
}

Boxes_msg::~Boxes_msg() {
  // @@protoc_insertion_point(destructor:benchmark.Boxes_msg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Boxes_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  physics_engine_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Boxes_msg::ArenaDtor(void* object) {
  Boxes_msg* _this = reinterpret_cast< Boxes_msg* >(object);
  (void)_this;
}
void Boxes_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Boxes_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Boxes_msg& Boxes_msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Boxes_msg_boxes_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void Boxes_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.Boxes_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  physics_engine_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_count_) -
      reinterpret_cast<char*>(&dt_)) + sizeof(model_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Boxes_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string physics_engine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_physics_engine();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.Boxes_msg.physics_engine"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 complex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          complex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 model_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          model_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .benchmark.Boxes_msg.Box_msg data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Boxes_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.Boxes_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string physics_engine = 1;
  if (this->physics_engine().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physics_engine().data(), static_cast<int>(this->_internal_physics_engine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.Boxes_msg.physics_engine");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_physics_engine(), target);
  }

  // double dt = 2;
  if (!(this->dt() <= 0 && this->dt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dt(), target);
  }

  // int32 complex = 3;
  if (this->complex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_complex(), target);
  }

  // int32 model_count = 4;
  if (this->model_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_model_count(), target);
  }

  // repeated .benchmark.Boxes_msg.Box_msg data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.Boxes_msg)
  return target;
}

size_t Boxes_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.Boxes_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .benchmark.Boxes_msg.Box_msg data = 5;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string physics_engine = 1;
  if (this->physics_engine().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physics_engine());
  }

  // double dt = 2;
  if (!(this->dt() <= 0 && this->dt() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 complex = 3;
  if (this->complex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_complex());
  }

  // int32 model_count = 4;
  if (this->model_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Boxes_msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:benchmark.Boxes_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Boxes_msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Boxes_msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:benchmark.Boxes_msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:benchmark.Boxes_msg)
    MergeFrom(*source);
  }
}

void Boxes_msg::MergeFrom(const Boxes_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.Boxes_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.physics_engine().size() > 0) {
    _internal_set_physics_engine(from._internal_physics_engine());
  }
  if (!(from.dt() <= 0 && from.dt() >= 0)) {
    _internal_set_dt(from._internal_dt());
  }
  if (from.complex() != 0) {
    _internal_set_complex(from._internal_complex());
  }
  if (from.model_count() != 0) {
    _internal_set_model_count(from._internal_model_count());
  }
}

void Boxes_msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:benchmark.Boxes_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boxes_msg::CopyFrom(const Boxes_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.Boxes_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boxes_msg::IsInitialized() const {
  return true;
}

void Boxes_msg::InternalSwap(Boxes_msg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  physics_engine_.Swap(&other->physics_engine_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Boxes_msg, model_count_)
      + sizeof(Boxes_msg::model_count_)
      - PROTOBUF_FIELD_OFFSET(Boxes_msg, dt_)>(
          reinterpret_cast<char*>(&dt_),
          reinterpret_cast<char*>(&other->dt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Boxes_msg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace benchmark
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::benchmark::pose* Arena::CreateMaybeMessage< ::benchmark::pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::pose >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::twist* Arena::CreateMaybeMessage< ::benchmark::twist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::twist >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::Boxes_msg_Box_msg* Arena::CreateMaybeMessage< ::benchmark::Boxes_msg_Box_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::Boxes_msg_Box_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::Boxes_msg* Arena::CreateMaybeMessage< ::benchmark::Boxes_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::Boxes_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
